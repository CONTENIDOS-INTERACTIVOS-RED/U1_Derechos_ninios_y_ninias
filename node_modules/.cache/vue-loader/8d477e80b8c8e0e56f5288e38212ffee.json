{"remainingRequest":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/src/views/curso/Tema2.vue?vue&type=template&id=1293aa9c&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/src/views/curso/Tema2.vue","mtime":1746506593425},{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derechos_ninios_y_ninias/U1_Derechos_ninios_y_ninias/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}